<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on JokerSite</title>
    <link>https://koudaihaizei.github.io/posts/</link>
    <description>Recent content in Posts on JokerSite</description>
    <image>
      <url>https://koudaihaizei.github.io/images/site/lien</url>
      <link>https://koudaihaizei.github.io/images/site/lien</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Jun 2022 22:44:35 +0800</lastBuildDate><atom:link href="https://koudaihaizei.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode876</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode876/</link>
      <pubDate>Mon, 13 Jun 2022 22:44:35 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode876/</guid>
      <description>876. 链表的中间结点  给定一个头结点为 head 的非空单链表，返回链表的中间结点。
如果有两个中间结点，则返回第二个中间结点。
示例 1：
输入：[1,2,3,4,5] 输出：此列表中的结点 3 (序列化形式：[3,4,5]) 返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。 注意，我们返回了一个 ListNode 类型的对象 ans，这样： ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL. 示例 2：
输入：[1,2,3,4,5,6] 输出：此列表中的结点 4 (序列化形式：[4,5,6]) 由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/middle-of-the-linked-list
 public ListNode middleNode(ListNode head) {  ListNode slow = head;  ListNode fast = head;  while (fast != null &amp;amp;&amp;amp; fast.next !</description>
    </item>
    
    <item>
      <title>Leetcode160</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode160/</link>
      <pubDate>Mon, 13 Jun 2022 22:44:28 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode160/</guid>
      <description>160. 相交链表  给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。
图示两个链表在节点 c1 开始相交：
题目数据 保证 整个链式结构中不存在环。
注意，函数返回结果后，链表必须 保持其原始结构 。
自定义评测：
评测系统 的输入如下（你设计的程序 不适用 此输入）：
intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0 listA - 第一个链表 listB - 第二个链表 skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数 skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数 评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/intersection-of-two-linked-lists
 public ListNode getIntersectionNode(ListNode headA, ListNode headB) {  ListNode p = headA;  ListNode q = headB;  while (p !</description>
    </item>
    
    <item>
      <title>Leetcode19</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode19/</link>
      <pubDate>Sun, 12 Jun 2022 22:01:58 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode19/</guid>
      <description>19. 删除链表的倒数第 N 个结点  给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
示例 1：
输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2：
输入：head = [1], n = 1 输出：[] 示例 3：
输入：head = [1,2], n = 1 输出：[1]
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/remove-nth-node-from-end-of-list
 public ListNode removeNthFromEnd(ListNode head, int n) {  ListNode dummy = new ListNode(-1);  dummy.next = head;  ListNode fast = dummy;  ListNode slow = dummy;  for (int i = 0; i &amp;lt; n + 1; i++) {  fast = fast.</description>
    </item>
    
    <item>
      <title>Leetcode23</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode23/</link>
      <pubDate>Sun, 12 Jun 2022 22:00:46 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode23/</guid>
      <description>23. 合并K个升序链表  给你一个链表数组，每个链表都已经按升序排列。
请你将所有链表合并到一个升序链表中，返回合并后的链表。
示例 ：
输入：lists = [[1,4,5],[1,3,4],[2,6]] 输出：[1,1,2,3,4,4,5,6] 解释：链表数组如下： [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] 将它们合并到一个有序链表中得到。 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 示例 2：
输入：lists = [] 输出：[] 示例 3：
输入：lists = [[]] 输出：[]
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/merge-k-sorted-lists
 public ListNode mergeKLists(ListNode[] lists) {  if (lists.length == 0) {  return null;  }  ListNode dummy = new ListNode(-1);  Queue&amp;lt;ListNode&amp;gt; queue = new PriorityQueue&amp;lt;&amp;gt;(lists.length, Comparator.comparingInt(o -&amp;gt; o.val));  for (ListNode node : lists) {  if (node !</description>
    </item>
    
    <item>
      <title>Leetcode86</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode86/</link>
      <pubDate>Sun, 12 Jun 2022 21:59:46 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode86/</guid>
      <description>86. 分隔链表  给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。
你应当 保留 两个分区中每个节点的初始相对位置。
示例 1：
输入：head = [1,4,3,2,5,2], x = 3 输出：[1,2,2,4,3,5] 示例 2：
输入：head = [2,1], x = 2 输出：[1,2]
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/partition-list
 public ListNode partition(ListNode head, int x) {  ListNode dummy1 = new ListNode(-1);  ListNode dummy2 = new ListNode(-2);  ListNode cur = head;  ListNode p1 = dummy1;  ListNode p2 = dummy2;  while (cur !</description>
    </item>
    
    <item>
      <title>Leetcode21</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode21/</link>
      <pubDate>Sun, 12 Jun 2022 21:58:16 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode21/</guid>
      <description>21. 合并两个有序链表  将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
示例 1：
输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] 示例 2：
输入：l1 = [], l2 = [] 输出：[] 示例 3：
输入：l1 = [], l2 = [0] 输出：[0]
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/merge-two-sorted-lists
 public ListNode mergeTwoLists(ListNode list1, ListNode list2) {  ListNode dummy = new ListNode(-1);  ListNode cur = dummy;  while (list1 != null &amp;amp;&amp;amp; list2 != null) {  if (list1.val &amp;lt; list2.val) {  cur.</description>
    </item>
    
    <item>
      <title>Leetcode752</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode752/</link>
      <pubDate>Sat, 11 Jun 2022 23:57:56 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode752/</guid>
      <description>752. 打开转盘锁  你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &amp;lsquo;0&amp;rsquo;, &amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;5&amp;rsquo;, &amp;lsquo;6&amp;rsquo;, &amp;lsquo;7&amp;rsquo;, &amp;lsquo;8&amp;rsquo;, &amp;lsquo;9&amp;rsquo; 。每个拨轮可以自由旋转：例如把 &amp;lsquo;9&amp;rsquo; 变为 &amp;lsquo;0&amp;rsquo;，&amp;lsquo;0&amp;rsquo; 变为 &amp;lsquo;9&amp;rsquo; 。每次旋转都只能旋转一个拨轮的一位数字。
锁的初始数字为 &amp;lsquo;0000&amp;rsquo; ，一个代表四个拨轮的数字的字符串。
列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
字符串 target 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 -1 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/open-the-lock
 解法一 DFS
public int openLock(String[] deadends, String target) {  // 存放死亡数字  Set&amp;lt;String&amp;gt; lock = new HashSet&amp;lt;&amp;gt;(Arrays.asList(deadends));  Queue&amp;lt;String&amp;gt; queue = new ArrayDeque&amp;lt;&amp;gt;();  // 存放遍历过的数字，避免重复遍历  Set&amp;lt;String&amp;gt; visited = new HashSet&amp;lt;&amp;gt;();  queue.offer(&amp;#34;0000&amp;#34;);  visited.</description>
    </item>
    
    <item>
      <title>Leetcode111</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode111/</link>
      <pubDate>Sat, 11 Jun 2022 23:47:51 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode111/</guid>
      <description>111. 二叉树的最小深度  给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
说明：叶子节点是指没有子节点的节点。
示例 1：
输入：root = [3,9,20,null,null,15,7] 输出：2 示例 2：
输入：root = [2,null,3,null,4,null,5,null,6] 输出：5
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/minimum-depth-of-binary-tree
 public int minDepth(TreeNode root) {  if (root == null) {  return 0;  }  // 广度优先遍历，利用队列存储待遍历列表  Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();  queue.offer(root);  int depth = 1;  while (!queue.isEmpty()) {  int size = queue.size();  for (int i = 0; i &amp;lt; size; i++) {  TreeNode node = queue.</description>
    </item>
    
    <item>
      <title>Leetcode188</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode188/</link>
      <pubDate>Sun, 05 Jun 2022 22:59:35 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode188/</guid>
      <description>188. 买卖股票的最佳时机 IV  给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv
 public int maxProfit(int k, int[] prices) {  int n = prices.length;  if (n &amp;lt;= 0) {  return 0;  }  int[][][] dp = new int[n][k + 1][2];   for (int i = 1; i &amp;lt;= k; i++) {  dp[0][i][1] = -prices[0];  }   for (int i = 1; i &amp;lt; n; i++) {  for (int j = 1; j &amp;lt;= k; j++) {  dp[i][j][0] = Math.</description>
    </item>
    
    <item>
      <title>Leetcode123</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode123/</link>
      <pubDate>Sun, 05 Jun 2022 21:46:07 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode123/</guid>
      <description>123. 买卖股票的最佳时机 III  给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii
 public int maxProfit(int[] prices) {  int n = prices.length;  int[][][] dp = new int[n][3][2];  // base case  // dp[0][0][0] = 0;  // dp[0][2][0] = 0;  dp[0][1][1] = -prices[0];  dp[0][2][1] = -prices[0];  for (int i = 1; i &amp;lt; n; i++) {  for (int k = 1; k &amp;lt;= 2; k++) {  dp[i][k][0] = Math.</description>
    </item>
    
    <item>
      <title>Leetcode714</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode714/</link>
      <pubDate>Sun, 05 Jun 2022 20:36:32 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode714/</guid>
      <description>714. 买卖股票的最佳时机含手续费  给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
返回获得利润的最大值。
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee
 public int maxProfit(int[] prices, int fee) {  int n = prices.length;  int dp00 = 0;  int dp01 = -prices[0] - fee;  for (int i = 1; i &amp;lt; n; i++) {  dp01 = Math.max(dp01, dp00 - prices[i] - fee);  dp00 = Math.max(dp00, dp01 + prices[i]);  }  return dp00; } </description>
    </item>
    
    <item>
      <title>leetcode309</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode309/</link>
      <pubDate>Sun, 05 Jun 2022 20:33:08 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode309/</guid>
      <description>309. 最佳买卖股票时机含冷冻期  给定一个整数数组prices，其中第 prices[i] 表示第 i 天的股票价格 。
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown
 public int maxProfit(int[] prices) {  int n = prices.length;  if (n &amp;lt; 2) {  return 0;  }  // base case  int dp00 = 0;  int dp01 = Math.max(-prices[0], -prices[1]);  int dpPre0 = 0;   // 状态转移  for (int i = 1; i &amp;lt; n; i++) {  int temp = dp00;  dp00 = Math.</description>
    </item>
    
    <item>
      <title>Leetcode122</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode122/</link>
      <pubDate>Sun, 29 May 2022 20:34:44 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode122/</guid>
      <description>122. 买卖股票的最佳时机 II  给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
返回 你能获得的 最大 利润 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii
 解法一 寻找所有上升区间，将处于上升的值相加及最大值
public int maxProfit(int[] prices) {  int res = 0;  for (int i = 1; i &amp;lt; prices.length; i++) {  if (prices[i] &amp;gt; prices[i - 1]) {  res += prices[i] - prices[i - 1];  }  }  return res; } 解法二 动态规划</description>
    </item>
    
    <item>
      <title>Leetcode121</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode121/</link>
      <pubDate>Sat, 28 May 2022 13:08:27 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode121/</guid>
      <description>121. 买卖股票的最佳时机  给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/best-time-to-buy-and-sell-stock
 解法一 保存遍历节点之前的最小值，也就是[0, i)区间的最小值，当前节点值减去最小值即为当前情况下的最大收益。之后和保存的全局最大收益作对比，如果当前值大于全局最大收益，则更新全局最大收益。
public int maxProfit(int[] prices) {  // 保存区间最小值  int minPrice = Integer.MAX_VALUE;  // 保存全局最大值  int max = 0;  for (int price : prices) {  if (minPrice &amp;gt; price) {  // 更新区间最小值  minPrice = price;  } else if (price - minPrice &amp;gt; max) {  // 更新全局最大值  max = price - minPrice;  }  }  return max; } 解法二 动态规划定义dp数组dp[i][k][0|1]，i代表第几天，k代表最多允许k次交易，最后一位0代表未持有股票，1代表持有股票。</description>
    </item>
    
    <item>
      <title>Fengqilongxi</title>
      <link>https://koudaihaizei.github.io/posts/video/series/fengqilongxi/</link>
      <pubDate>Thu, 26 May 2022 21:30:42 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/video/series/fengqilongxi/</guid>
      <description>风起陇西 导演: 路阳
编剧: 金海曙 / 金昱
类型: 剧情 / 悬疑 / 历史 / 古装
制片国家/地区: 中国大陆
 剧情简介：
天下三分，烽火四起，在这个英雄辈出的时代，战争不仅有刀光剑影，亦不只是血肉搏杀。秘密情报线上的生死角逐，正涌动于滚滚洪流的阴影当中。
两个不被乱世聚焦的“小人物”——陈恭（陈坤 饰）与荀诩（白宇 饰），他们生死相依的兄弟情在惊心动魄的谍战中爆发出夺目光辉，谱写出一段英雄传奇。
 简评 故事由三国时期蜀国首次北伐引入，败走街亭的失败中引出“谍战”这一主题，而北伐所争之地在于陇西，由此对应标题“风起陇西”。故事前期叙事节奏一般，虽然有三国作为时代背景，但故事的背景是不熟悉的台面下的斗争，并引入了不少独创的部门和人物，初期人物关系比较繁杂。
随着故事逐渐进行，剧情冲突的展开还是不错的，无论是前期糜冲的突然下线，中期陈恭身份的几次反转，以及结尾的“胜利”转向陈恭的悲惨结局，这几段剧情的发展方向还是让人有眼前一亮的感觉。但故事在部分情节处理上还是感觉过于公式化，比如反派永远在怀疑主角，而且是那种“明牌”式的怀疑，这种套路用一两次还好，每次都这种模式难免审美出现疲劳；其次，部分人物的刻画不够，比如柳莹，虽然有着推动故事发展的几件事，但全篇看下来，爱情线方面没什么成长，事业线方面就在几件事上担任工具人角色，而且演员的声音着实有些出戏。
总的来说，故事情节设计的还算不错，大部分演员的演技也在线，二十四集剧情也剪辑的较为紧凑，不失为一部佳作。
评分  剧情：几段高能剧情穿插，总体质量还算不错。&amp;mdash;- 8分 音乐：片头曲大气磅礴，片尾曲稍不合适，插曲印象不深。 &amp;mdash;-6分 表演：双男主及部分配角演技在线，部分演员原声违和。 &amp;mdash;-8分 场景：服化道有特点，画面风格偏冷，打戏表现尚可。 &amp;mdash;-8分 剪辑：前期节奏较慢，中间剧情较为紧凑，结尾稍拖沓。 &amp;mdash;-7分  </description>
    </item>
    
    <item>
      <title>Leetcode3</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode3/</link>
      <pubDate>Sun, 22 May 2022 21:25:28 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode3/</guid>
      <description>3. 无重复字符的最长子串  给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
示例 1:
输入: s = &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。 示例 2:
输入: s = &amp;ldquo;bbbbb&amp;rdquo; 输出: 1 解释: 因为无重复字符的最长子串是 &amp;ldquo;b&amp;rdquo;，所以其长度为 1。 示例 3:
输入: s = &amp;ldquo;pwwkew&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;wke&amp;rdquo;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&amp;ldquo;pwke&amp;rdquo; 是一个子序列，不是子串。
提示：
0 &amp;lt;= s.length &amp;lt;= 5 * 104 s 由英文字母、数字、符号和空格组成
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/longest-substring-without-repeating-characters
 解法一 public int lengthOfLongestSubstring(String s) {  Map&amp;lt;Character, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();  int left = 0, right = 0;  int res = 0;  while (right &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Leetcode438</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode438/</link>
      <pubDate>Sun, 22 May 2022 21:25:25 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode438/</guid>
      <description>438. 找到字符串中所有字母异位词  给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。
异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/find-all-anagrams-in-a-string
 public List&amp;lt;Integer&amp;gt; findAnagrams(String s, String p) {  List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();  if (p.length() &amp;gt; s.length()) {  return res;  }  int[] need = new int[26];  int[] window = new int[26];  int count = 0;  for (char c : p.toCharArray()) {  int index = getIndex(c);  if (need[index] == 0) {  count++;  }  need[index]++;  }  int left = 0, right = 0;  int valid = 0;  while (right &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Leetcode567</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode567/</link>
      <pubDate>Sun, 22 May 2022 21:25:19 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode567/</guid>
      <description>567. 字符串的排列  给你两个字符串 s1 和 s2 ，写一个函数来判断 s2 是否包含 s1 的排列。如果是，返回 true ；否则，返回 false 。
换句话说，s1 的排列之一是 s2 的 子串 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/permutation-in-string
 public boolean checkInclusion(String s1, String s2) {  if (s1.length() &amp;gt; s2.length()) {  return false;  }  // 初始化目标字符数组并计数  int[] need = new int[26];  int[] window = new int[26];  int count = 0;  for (char c : s1.toCharArray()) {  int index = getIndex(c);  if (need[index] == 0) {  count++;  }  need[index]++;  }   int left = 0, right = 0;  int valid = 0;  // 区间[left, right)  while (right &amp;lt; s2.</description>
    </item>
    
    <item>
      <title>Leetcode76</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode76/</link>
      <pubDate>Thu, 19 May 2022 22:54:36 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode76/</guid>
      <description>76. 最小覆盖子串  给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &amp;quot;&amp;quot; 。
注意：
对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。 如果 s 中存在这样的子串，我们保证它是唯一的答案。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/minimum-window-substring
 解法一 public String minWindow(String s, String t) {  if (s.length() &amp;lt; t.length()) {  return &amp;#34;&amp;#34;;  }   // 初始化目标字符集合并计数  Map&amp;lt;Character, Integer&amp;gt; need = new HashMap&amp;lt;&amp;gt;();  for (int i = 0; i &amp;lt; t.length(); i++) {  need.</description>
    </item>
    
    <item>
      <title>Leetcode51</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode51/</link>
      <pubDate>Mon, 16 May 2022 22:50:57 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode51/</guid>
      <description>51. N 皇后  n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。
每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 &amp;lsquo;Q&amp;rsquo; 和 &amp;lsquo;.&amp;rsquo; 分别代表了皇后和空位。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/n-queens
 public List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; solveNQueens(int n) {  List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();  char[][] temp = new char[n][n];  for (int i = 0; i &amp;lt; n; i++) {  for (int j = 0; j &amp;lt; n; j++) {  temp[i][j] = &amp;#39;.</description>
    </item>
    
    <item>
      <title>Leetcode322</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode322/</link>
      <pubDate>Mon, 09 May 2022 23:39:39 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode322/</guid>
      <description>322. 零钱兑换  给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。
你可以认为每种硬币的数量是无限的。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/coin-change
 解法一，自顶向下
public int coinChange(int[] coins, int amount) {  int[] dp = new int[amount + 1];  // 初始化为无法达到的最大值  Arrays.fill(dp, amount + 1);  int res = coinChange(coins, amount, dp, amount);  // 判断是否能够凑整  return res != amount + 1 ? res : -1; }  private int coinChange(int[] coins, int amount, int[] dp, int total) {  if (amount == 0) {  return 0;  }  if (amount &amp;lt; 0) {  return -1;  }  // 利用记录结果减少重复计算  if (dp[amount] !</description>
    </item>
    
    <item>
      <title>Leetcode18</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode18/</link>
      <pubDate>Mon, 09 May 2022 22:28:29 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode18/</guid>
      <description>18. 四数之和  给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：
0 &amp;lt;= a, b, c, d &amp;lt; n a、b、c 和 d 互不相同 nums[a] + nums[b] + nums[c] + nums[d] == target 你可以按 任意顺序 返回答案 。
来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/4sum
 public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(int[] nums, int target) {  List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();  if (nums.length &amp;lt; 4) {  return res;  }  // 升序排序  Arrays.</description>
    </item>
    
    <item>
      <title>Leetcode509</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode509/</link>
      <pubDate>Sun, 08 May 2022 20:57:47 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode509/</guid>
      <description>509. 斐波那契数  斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：
F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n &amp;gt; 1 给定 n ，请计算 F(n) 。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/fibonacci-number
 自底向上解法 public int fib(int n) {  // f(0)=0,f(1)=1  if (n &amp;lt;= 1) {  return n;  }  int a = 0;  int b = 1;  for (int i = 2; i &amp;lt;= n; i++) {  // 临时保存b的值，以便于赋值给a  int tmp = b;  b = a + b;  a = tmp;  }  return b; } 自顶向下解法 public int fib(int n) {  // 备忘录，记录已计算的函数值  int[] memo = new int[n + 1];  return helper(n, memo); }  private int helper(int n, int[] memo) {  if (n &amp;lt;= 1) {  return n;  }  // 如果备忘录已记录，则直接返回备忘录结果值  if (memo[n] !</description>
    </item>
    
    <item>
      <title>Leetcode15</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode15/</link>
      <pubDate>Fri, 06 May 2022 23:20:02 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode15/</guid>
      <description>15. 三数之和  给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/3sum
 public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum(int[] nums) {  List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();  if (nums.length &amp;lt; 3) {  return res;  }  // 排序后，遍历第一个数，并用双指针法计算后面两个数  Arrays.sort(nums);  for (int i = 0; i &amp;lt; nums.length - 2; i++) {  // 避免重复，跳过已经计算过的相同的第一个数  if (i !</description>
    </item>
    
    <item>
      <title>Leetcode1</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode1/</link>
      <pubDate>Fri, 06 May 2022 22:33:10 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode1/</guid>
      <description>1. 两数之和  给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/two-sum
 public int[] twoSum(int[] nums, int target) {  // 利用hash表提升检索效率  Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();  for (int i = 0; i &amp;lt; nums.length; i++) {  int other = target - nums[i];  // 遍历过程中判断后加入集合，效率最高  if (map.containsKey(other)) {  return new int[]{map.get(other), i};  }  map.put(nums[i], i);  }  return new int[]{-1, -1}; } </description>
    </item>
    
    <item>
      <title>Leetcode34</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode34/</link>
      <pubDate>Thu, 05 May 2022 23:13:58 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode34/</guid>
      <description>34. 在排序数组中查找元素的第一个和最后一个位置  给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
如果数组中不存在目标值 target，返回 [-1, -1]。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array
 思路基于二分查找改造，边界条件判断可参考leetcode704。
解法一 public int[] searchRange(int[] nums, int target) {  int leftIndex = searchLeftRange(nums, target);  if (leftIndex == -1) {  return new int[]{-1, -1};  }   int rightIndex = searchRightRange(nums, target) ;  return new int[]{leftIndex, rightIndex}; }  private int searchLeftRange(int[] nums, int target) {  int left = 0;  int right = nums.</description>
    </item>
    
    <item>
      <title>Leetcode704</title>
      <link>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode704/</link>
      <pubDate>Wed, 04 May 2022 22:30:12 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/algorithm/leetcode/leetcode704/</guid>
      <description>704. 二分查找  给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/binary-search
 解法一 public int search(int[] nums, int target) {  // 区间[0, nums.length - 1]  int left = 0;  int right = nums.length - 1;  // 由于采用闭区间[0, nums.length - 1]，right初始为nums.length - 1，因此采用left&amp;lt;=right作为判断  while (left &amp;lt;= right) {  // 避免数字相加溢出  // 移位运算速度大于操作符  int mid = left + ((right - left) &amp;gt;&amp;gt; 1);  if (nums[mid] &amp;lt; target) {  // mid对应值小于目标值，缩小区间为[mid + 1, right]  left = mid + 1;  } else if (nums[mid] &amp;gt; target) {  // mid对应值大于目标值，缩小区间为[left, mid - 1]  right = mid - 1;  } else {  return mid;  }  }  return -1; } 解法二 public int search(int[] nums, int target) {  // 区间[0, nums.</description>
    </item>
    
    <item>
      <title>中断</title>
      <link>https://koudaihaizei.github.io/posts/java/concurrency/interrupts/</link>
      <pubDate>Tue, 26 Apr 2022 14:38:47 +0800</pubDate>
      
      <guid>https://koudaihaizei.github.io/posts/java/concurrency/interrupts/</guid>
      <description>中断用于指示线程停止正在做的事情，但线程响应中断的方式由程序决定，通常情况下程序会执行中断处理。
未对中断标识位判断，无法响应中断
/** * 无法中断 */ private void demo1() {  Thread thread = new Thread(() -&amp;gt; {  while (true) {  Thread.yield();  }  });  thread.start();  thread.interrupt(); } 程序通过对中断标识位判断做出处理，响应中断执行返回
/** * 响应中断 */ private void demo2() {  Thread thread = new Thread(() -&amp;gt; {  while (true) {  Thread.yield();  if (Thread.currentThread().isInterrupted()) {  System.out.println(&amp;#34;thread is interrupted&amp;#34;);  return;  }  }  });  thread.</description>
    </item>
    
  </channel>
</rss>
